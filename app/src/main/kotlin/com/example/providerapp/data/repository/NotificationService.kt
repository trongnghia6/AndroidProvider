package com.example.providerapp.data.repository

import android.util.Log
import com.example.providerapp.core.supabase
import com.example.providerapp.data.model.NotificationInsert
import io.github.jan.supabase.postgrest.postgrest
import io.github.jan.supabase.postgrest.query.Columns
import io.ktor.client.HttpClient
import io.ktor.client.engine.cio.CIO
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.http.isSuccess
import io.ktor.serialization.kotlinx.json.json
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.withContext

class NotificationService {
    private val httpClient = HttpClient(CIO){
        install(io.ktor.client.plugins.contentnegotiation.ContentNegotiation) {
            json(kotlinx.serialization.json.Json {
                ignoreUnknownKeys = true
            })
        }
    }
    private val repository = NotificationRepository()

    companion object {
        const val TYPE_LOGIN_SUCCESS = "login_success"
        const val TYPE_BOOKING = "booking"
        const val TYPE_ORDER = "order"
        const val TYPE_SYSTEM = "system"
        const val TYPE_GENERAL = "general"
        const val TYPE_MESSAGE = "message"
        const val TYPE_BOOKING_UPDATE = "booking_update"
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
     */
    suspend fun sendLoginSuccessNotification(userId: String, userName: String = "b·∫°n"): Boolean {
        val title = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng! üéâ"
        val body = "Ch√†o m·ª´ng $userName quay tr·ªü l·∫°i! H√£y kh√°m ph√° c√°c d·ªãch v·ª• m·ªõi nh·∫•t c·ªßa ch√∫ng t√¥i."

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_LOGIN_SUCCESS,
            data = mapOf(
                "action" to "welcome",
                "timestamp" to System.currentTimeMillis().toString()
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o booking th√†nh c√¥ng
     */
    suspend fun sendBookingSuccessNotification(userId: String, bookingId: String, serviceName: String): Boolean {
        val title = "ƒê·∫∑t l·ªãch th√†nh c√¥ng ‚úÖ"
        val body = "L·ªãch h·∫πn $serviceName c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. M√£ ƒë·∫∑t l·ªãch: #$bookingId"

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_BOOKING,
            data = mapOf(
                "booking_id" to bookingId,
                "service_name" to serviceName,
                "action" to "view_booking"
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o booking v·ªõi tr·∫°ng th√°i
     */
    suspend fun sendBookingNotification(userId: String, bookingId: String, status: String): Boolean {
        val (title, body) = when (status) {
            "confirmed" -> "ƒê·∫∑t l·ªãch ƒë√£ x√°c nh·∫≠n ‚úÖ" to "L·ªãch h·∫πn #$bookingId ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n."
            "cancelled" -> "L·ªãch h·∫πn ƒë√£ h·ªßy ‚ùå" to "L·ªãch h·∫πn #$bookingId ƒë√£ b·ªã h·ªßy."
            "completed" -> "L·ªãch h·∫πn ho√†n th√†nh üéâ" to "L·ªãch h·∫πn #$bookingId ƒë√£ ho√†n th√†nh."
            "rescheduled" -> "L·ªãch h·∫πn ƒë√£ ƒë·ªïi l·ªãch üîÑ" to "L·ªãch h·∫πn #$bookingId ƒë√£ ƒë∆∞·ª£c ƒë·ªïi l·ªãch."
            else -> "C·∫≠p nh·∫≠t l·ªãch h·∫πn üìã" to "L·ªãch h·∫πn #$bookingId ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i: $status"
        }

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_BOOKING,
            data = mapOf(
                "booking_id" to bookingId,
                "status" to status,
                "action" to "view_booking"
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o ƒë∆°n h√†ng m·ªõi
     */
    suspend fun sendOrderNotification(userId: String, orderId: String, status: String): Boolean {
        val title = when (status) {
            "created" -> "ƒê∆°n h√†ng m·ªõi ƒë∆∞·ª£c t·∫°o üì¶"
            "confirmed" -> "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ‚úÖ"
            "processing" -> "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω ‚öôÔ∏è"
            "completed" -> "ƒê∆°n h√†ng ho√†n th√†nh üéâ"
            else -> "C·∫≠p nh·∫≠t ƒë∆°n h√†ng"
        }

        val body = "ƒê∆°n h√†ng #$orderId ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i: $status"

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_ORDER,
            data = mapOf(
                "order_id" to orderId,
                "status" to status,
                "action" to "view_order"
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o h·ªá th·ªëng
     */
    suspend fun sendSystemNotification(userId: String, title: String, body: String): Boolean {
        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_SYSTEM
        )
    }

    /**
     * Function ch√≠nh ƒë·ªÉ g·ª≠i notification - CH·ªà CHO MANUAL NOTIFICATIONS
     * AUTO NOTIFICATIONS (booking/message) ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi database triggers
     */
    private suspend fun sendNotificationToUser(
        userId: String,
        title: String,
        body: String,
        type: String = TYPE_GENERAL,
        data: Map<String, String>? = null
    ): Boolean {
        return try {
            // ‚úÖ CH·ªà SAVE V√ÄO DATABASE - KH√îNG G·ªåI FCM
            // (Triggers s·∫Ω x·ª≠ l√Ω FCM cho auto notifications)

            Log.d("NotificationService", "üìù Saving manual notification to database only")

            val notificationInsert = NotificationInsert(
                userId = userId,
                title = title,
                body = body,
                type = type,
                data = data
            )

            val saveSuccess = repository.insertNotification(notificationInsert)
            if (!saveSuccess) {
                Log.e("NotificationService", "Failed to save notification to database")
                return false
            }

            Log.d("NotificationService", "‚úÖ Manual notification saved successfully")
            Log.d("NotificationService", "‚ÑπÔ∏è FCM will be handled by triggers for auto notifications")
            return true

        } catch (e: Exception) {
            Log.e("NotificationService", "Error sending notification: ${e.message}", e)
            false
        }
    }

    /**
     * L·∫•y FCM tokens c·ªßa user
     */
    private suspend fun getFCMTokens(userId: String): List<String> {
        return try {
            withContext(Dispatchers.IO + SupervisorJob()) {
                Log.d("NotificationService", "Fetching FCM tokens for user: $userId")

                val result = supabase.postgrest
                    .from("user_push_tokens")
                    .select(columns = Columns.list("token")) {
                        filter {
                            eq("user_id", userId)
                        }
                    }
                    .decodeList<Map<String, String>>()

                val tokens = result.mapNotNull { it["token"] }.filter { it.isNotBlank() }
                Log.d("NotificationService", "Found ${tokens.size} FCM tokens for user $userId")

                tokens
            }
        } catch (e: Exception) {
            Log.e("NotificationService", "Error fetching FCM tokens: ${e.message}")
            Log.e("NotificationService", "Error details: ", e)
            emptyList()
        }
    }

    /**
     * G·ª≠i FCM notification ƒë·∫øn m·ªôt token c·ª• th·ªÉ
     */
    private suspend fun sendFCMNotification(
        token: String,
        title: String,
        body: String,
        type: String,
        data: Map<String, String>?
    ): Boolean {
        return withContext(Dispatchers.IO + SupervisorJob()) {
            try {
                val fcmData = mutableMapOf("type" to type)
                data?.let { fcmData.putAll(it) }

                Log.d("NotificationService", "Sending FCM to token: ${token.take(20)}...")
                Log.d("NotificationService", "FCM payload - Title: $title, Body: $body, Type: $type")

                // G·ª≠i qua Supabase Edge Function
                val response = httpClient.post("https://uyxudwhglwwbvbnjgwmw.supabase.co/functions/v1/send-push") {
                    contentType(ContentType.Application.Json)
                    setBody(FcmPayload(token, title, body, fcmData))
                }

                if (response.status.isSuccess()) {
                    Log.d("NotificationService", "‚úÖ FCM sent successfully to token: ${token.take(10)}...")
                    true
                } else {
                    val responseText = try { response.bodyAsText() } catch (e: Exception) { "Unable to read response" }
                    Log.e("NotificationService", "‚ùå FCM failed with status: ${response.status}")
                    Log.e("NotificationService", "‚ùå Response body: $responseText")

                    if (response.status.value == 401) {
                        Log.e("NotificationService", "‚ùå 401 Unauthorized - Firebase service account not configured in Supabase!")
                        Log.e("NotificationService", "‚ùå Please check FIREBASE_SERVICE_ACCOUNT_SETUP.md for setup instructions")
                    }
                    false
                }

            } catch (e: Exception) {
                Log.e("NotificationService", "‚ùå Error sending FCM: ${e.message}")
                Log.e("NotificationService", "‚ùå Error details: ", e)
                false
            }
        }
    }

    /**
     * Test function - g·ª≠i notification test
     */
    suspend fun sendTestNotification(userId: String): Boolean {
        return sendNotificationToUser(
            userId = userId,
            title = "üß™ Test Notification",
            body = "ƒê√¢y l√† th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng notification. Th·ªùi gian: ${System.currentTimeMillis()}",
            type = TYPE_SYSTEM,
            data = mapOf(
                "test" to "true",
                "timestamp" to System.currentTimeMillis().toString()
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o khi c√≥ booking m·ªõi ho·∫∑c c·∫≠p nh·∫≠t
     */
    suspend fun sendBookingUpdateNotification(
        userId: String,
        bookingId: String,
        action: String, // "created", "updated", "confirmed", "cancelled", "completed"
        serviceName: String? = null
    ): Boolean {
        val (title, body) = when (action) {
            "created" -> "ƒê·∫∑t l·ªãch m·ªõi üìÖ" to "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch th√†nh c√¥ng. M√£ booking: #$bookingId"
            "updated" -> "C·∫≠p nh·∫≠t l·ªãch h·∫πn ‚úèÔ∏è" to "L·ªãch h·∫πn #$bookingId ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√¥ng tin."
            "confirmed" -> "L·ªãch h·∫πn ƒë√£ x√°c nh·∫≠n ‚úÖ" to "L·ªãch h·∫πn #$bookingId ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi nh√† cung c·∫•p d·ªãch v·ª•."
            "cancelled" -> "L·ªãch h·∫πn ƒë√£ h·ªßy ‚ùå" to "L·ªãch h·∫πn #$bookingId ƒë√£ b·ªã h·ªßy. Vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
            "completed" -> "D·ªãch v·ª• ho√†n th√†nh üéâ" to "D·ªãch v·ª• trong l·ªãch h·∫πn #$bookingId ƒë√£ ho√†n th√†nh. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!"
            else -> "C·∫≠p nh·∫≠t booking üìã" to "Booking #$bookingId c√≥ c·∫≠p nh·∫≠t m·ªõi."
        }

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = if (serviceName != null) "$body\nD·ªãch v·ª•: $serviceName" else body,
            type = TYPE_BOOKING_UPDATE,
            data = mapOf(
                "booking_id" to bookingId,
                "action" to action,
                "service_name" to (serviceName ?: ""),
                "navigate_to" to "booking_detail"
            )
        )
    }

    /**
     * G·ª≠i th√¥ng b√°o khi nh·∫≠n tin nh·∫Øn m·ªõi
     */
    suspend fun sendNewMessageNotification(
        userId: String,
        senderId: String,
        senderName: String,
        messagePreview: String,
        conversationId: String? = null
    ): Boolean {
        val title = "Tin nh·∫Øn m·ªõi t·ª´ $senderName üí¨"
        val body = if (messagePreview.length > 50) {
            "${messagePreview.take(47)}..."
        } else {
            messagePreview
        }

        return sendNotificationToUser(
            userId = userId,
            title = title,
            body = body,
            type = TYPE_MESSAGE,
            data = mapOf(
                "sender_id" to senderId,
                "sender_name" to senderName,
                "conversation_id" to (conversationId ?: ""),
                "navigate_to" to "chat_detail"
            )
        )
    }

    /**
     * Test function - ki·ªÉm tra FCM tokens
     */
    suspend fun testFCMTokenRetrieval(userId: String): List<String> {
        Log.d("NotificationService", "=== Testing FCM Token Retrieval ===")
        val tokens = getFCMTokens(userId)
        Log.d("NotificationService", "Retrieved ${tokens.size} tokens for user $userId")
        tokens.forEachIndexed { index, token ->
            Log.d("NotificationService", "Token $index: ${token.take(20)}...")
        }
        Log.d("NotificationService", "=====================================")
        return tokens
    }
}

@kotlinx.serialization.Serializable
data class FcmPayload(
    val token: String,
    val title: String,
    val body: String,
    val data: Map<String, String>
)

